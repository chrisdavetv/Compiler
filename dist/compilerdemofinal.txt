//This sample code (also in compilerdemofinal.txt)  tests my script - like grammar for  math operators, comparison operators,
// type agnostic variable declaration,  if-then-else, for and while loops, ternary conditional expressions, assignment,
// parenthesis grouped expression evaluation, function calls

def useTernary
useTernary = false	 //change this to test ternary expresson or traditional if-then type conditional

def printRecurse()

	def iterationCtr
	iterationCtr = 0

	return 0

end


def demonstarteMathOps()	
	//comments are supported as well
	
	Writeln("Starting math ops demonstration")
	Writeln()

	def x, y
	x = 10
	y = 50

	//addition
	Write("Adding 10 and 50: ")
	Writeln(x+y)
	
	//sub
	Write("Subtracting 10 and 50: ")
	Writeln(x - y)

	//mult
	Write("Multiplying 10 and 50:")
	Writeln(x * y)

	//div
	Write("Dividing 10 and 50:")
	Writeln(10/50)

	//exponentiation
	Write("Raising 10 to the 50th power:")
	Writeln(10^50)

	//modulo
	Write("10 modulo 50:")
	Writeln(10%50)
	Writeln()Writeln()Writeln()
end

def demonstrateComparisonOps()
	def a,b, c, compareResult
	a = 100
	b = 200
	c = 300
	Write("Starting comparison operators demo: Creating 3 variables a, b and c with respective values: ")
	Write(a)
	Write(", ")
	Write(b)
	Write(", ")
	Writeln(c)
	Write(" and using boolean variables to hold comparison result")
	Writeln()
	Writeln()

	// equals, not equal
	Write("Is a equal to b?: ")
	compareResult = a ==b
	Writeln(compareResult)
	Write("Is a not equal to b+1?: ")
	compareResult = a != ( b + 1) 
	Writeln(compareResult)
	Writeln()

	//lessthan
	Write("Is a less than b?:")
	compareResult = a < b
	Writeln(compareResult)
	Writeln()	

	//lessthanequal
	Write("Is a - 1 less than or equal to b?: ")
	compareResult = (a-1) <= b
	Writeln(compareResult)
	Writeln()

	//greaterthan
	Write("Is b greater than a?: ")
	compareResult = b > a
	Writeln(compareResult)
	Writeln()

	//greaterthan equal
	Write("Is a >= a? :")
	compareResult = a >= a
	Writeln(compareResult)
	Writeln()
	
	//And
	Write("Is a < 2 AND b > 4? : ")
	compareResult = a < 2 && b > 4
	Writeln(compareResult)
	Writeln()

	//OR
	Write("Is a < 2 OR b > 4? : ")
	compareResult = a < 2 || b > 4
	Writeln(compareResult)
	Writeln()

end

def printTernarySuccessBranch()
	Writeln("Ternary Success branch executed!")
end
def printTernaryFalseBranch()
	Writeln("Ternary False branch executed!")
end



//main code is simply all code that is not wrapped in a function, like the following
if(useTernary) do

	(1 == 1) ? printTernarySuccessBranch() : printTernaryFalseBranch() 

else do 

	if 1==2 do
   	 	Writeln("first condition met")
	else if 1==1 do
     		Writeln("Starting compiler demo: Please note that all numbers used in math/comparison operations are stored in variables. Included with this jar file are sample grammar source code files to verify functionality.")
		demonstarteMathOps()
		demonstrateComparisonOps()
	else do
      		 Writeln("else if condition met")
	end

end

/*def printRes
printRes = printRecurse()
Writeln("result of printRecurse() is")
Writeln(printRes)
Writeln("Adding 5 to result: ")
printRes = printRes + 5
Writeln(printRes)*/

if(printRecurse() < 6 && (1 == 2 || 1 ==1) ) do
	Writeln("printRes is less than 6")
end
