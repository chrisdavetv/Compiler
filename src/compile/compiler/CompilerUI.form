<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Component class="javax.swing.JMenuItem" name="jMenuItem1">
      <Properties>
        <Property name="text" type="java.lang.String" value="jMenuItem1"/>
      </Properties>
    </Component>
    <Component class="javax.swing.JMenuItem" name="jMenuItem8">
      <Properties>
        <Property name="text" type="java.lang.String" value="jMenuItem8"/>
      </Properties>
    </Component>
    <Menu class="javax.swing.JMenuBar" name="jMenuBar1">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="jMenu1">
          <Properties>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem3">
              <Properties>
                <Property name="text" type="java.lang.String" value="New"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem3ActionPerformed"/>
              </Events>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem4">
              <Properties>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem4ActionPerformed"/>
              </Events>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem5">
              <Properties>
                <Property name="text" type="java.lang.String" value="Save As..."/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem5ActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="jMenu2">
          <Properties>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_InitCodePre" type="java.lang.String" value="Action cut = new DefaultEditorKit.CutAction();&#xa;Action paste = new DefaultEditorKit.PasteAction();&#xa;Action copy = new DefaultEditorKit.CopyAction();&#xa;//UndoManager manager = new UndoManager();&#xa;//Action undo = javax.swing.undo.UndoManagerHelper.getUndoAction(manager);&#xa;//Action redo = javax.swing.undo.UndoManagerHelper.getRedoAction(manager);&#xa;&#xa;Action[] textActions = { cut, copy, paste };&#xa;for (Action textAction : textActions) {&#xa;    javax.swing.JMenuItem menuitem = new javax.swing.JMenuItem(textAction);&#xa;    &#xa;    if(textAction == cut ){&#xa;        menuitem.setText(&quot;Cut&quot;);&#xa;        menuitem.setAccelerator(KeyStroke.getKeyStroke(&apos;X&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));&#xa;    } else if(textAction == copy ){&#xa;        menuitem.setText(&quot;Copy&quot;);&#xa;        menuitem.setAccelerator(KeyStroke.getKeyStroke(&apos;C&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));&#xa;    } else if(textAction == paste ){&#xa;        menuitem.setText(&quot;Paste&quot;);&#xa;        menuitem.setAccelerator(KeyStroke.getKeyStroke(&apos;V&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));&#xa;    } /*else if (textAction == undo){&#xa;        menuitem.setText(&quot;Undo&quot;);&#xa;        menuitem.setAccelerator(KeyStroke.getKeyStroke(&apos;Z&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));&#xa;    } else if (textAction == redo){&#xa;        menuitem.setText(&quot;Redo&quot;);&#xa;        menuitem.setAccelerator(KeyStroke.getKeyStroke(&apos;Y&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));&#xa;    }*/&#xa;    jMenu2.add(menuitem);&#xa;}"/>
          </AuxValues>
        </Menu>
        <Menu class="javax.swing.JMenu" name="jMenu3">
          <Properties>
            <Property name="text" type="java.lang.String" value="Run"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JCheckBoxMenuItem" name="jCheckBoxMenuItem1">
              <Properties>
                <Property name="selected" type="boolean" value="true"/>
                <Property name="text" type="java.lang.String" value="Run"/>
                <Property name="name" type="java.lang.String" value="RunMenuItem" noResource="true"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jCheckBoxMenuItem1ActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="jMenu4">
          <Properties>
            <Property name="text" type="java.lang.String" value="Search"/>
            <Property name="name" type="java.lang.String" value="SearchMenu" noResource="true"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem2">
              <Properties>
                <Property name="text" type="java.lang.String" value="Search Code"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem2ActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="jMenu5">
          <Properties>
            <Property name="text" type="java.lang.String" value="Watch"/>
            <Property name="name" type="java.lang.String" value="Watch" noResource="true"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem6">
              <Properties>
                <Property name="text" type="java.lang.String" value="Add Variable"/>
                <Property name="name" type="java.lang.String" value="AddVariable" noResource="true"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem6ActionPerformed"/>
              </Events>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="jMenuItem7">
              <Properties>
                <Property name="text" type="java.lang.String" value="Remove Variable"/>
                <Property name="name" type="java.lang.String" value="RemoveVariable" noResource="true"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jMenuItem7ActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="jMenuBar1"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <Events>
    <EventHandler event="windowOpened" listener="java.awt.event.WindowListener" parameters="java.awt.event.WindowEvent" handler="formWindowOpened"/>
  </Events>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
  </AuxValues>

  <Layout>
    <DimensionLayout dim="0">
      <Group type="103" groupAlignment="0" attributes="0">
          <Component id="jSplitPane1" alignment="0" pref="771" max="32767" attributes="0"/>
      </Group>
    </DimensionLayout>
    <DimensionLayout dim="1">
      <Group type="103" groupAlignment="0" attributes="0">
          <Component id="jSplitPane1" alignment="0" pref="350" max="32767" attributes="0"/>
      </Group>
    </DimensionLayout>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JSplitPane" name="jSplitPane1">
      <Properties>
        <Property name="dividerLocation" type="int" value="250"/>
        <Property name="orientation" type="int" value="0"/>
      </Properties>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
      <SubComponents>
        <Container class="javax.swing.JTabbedPane" name="jTabbedPane1">
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="top"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JTabbedPaneSupportLayout"/>
          <SubComponents>
            <Container class="javax.swing.JScrollPane" name="jScrollPane1">
              <AuxValues>
                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
              </AuxValues>
              <Constraints>
                <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JTabbedPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JTabbedPaneSupportLayout$JTabbedPaneConstraintsDescription">
                  <JTabbedPaneConstraints tabName="tab1">
                    <Property name="tabTitle" type="java.lang.String" value="tab1"/>
                  </JTabbedPaneConstraints>
                </Constraint>
              </Constraints>

              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
              <SubComponents>
                <Component class="javax.swing.JTextArea" name="jTextArea1">
                  <Properties>
                    <Property name="columns" type="int" value="20"/>
                    <Property name="rows" type="int" value="5"/>
                    <Property name="text" type="java.lang.String" value="lkjhlkjh"/>
                  </Properties>
                  <AuxValues>
                    <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new javax.swing.JTextArea()"/>
                    <AuxValue name="JavaCodeGenerator_InitCodePre" type="java.lang.String" value="LineNumberedBorder lnb = new LineNumberedBorder(LineNumberedBorder.LEFT_SIDE, LineNumberedBorder.LEFT_JUSTIFY);&#xa;jTextArea1.setBorder(lnb);&#xa;&#xa;final UndoManager undo = new UndoManager();&#xa;Document doc = jTextArea1.getDocument();&#xa;&#xa;// Listen for undo and redo events&#xa;doc.addUndoableEditListener(new UndoableEditListener() {&#xa;    public void undoableEditHappened(UndoableEditEvent evt) {&#xa;        undo.addEdit(evt.getEdit());&#xa;    }&#xa;});&#xa;&#xa;// Create an undo action and add it to the text component&#xa;jTextArea1.getActionMap().put(&quot;Undo&quot;,&#xa;    new AbstractAction(&quot;Undo&quot;) {&#xa;        public void actionPerformed(ActionEvent evt) {&#xa;            try {&#xa;                if (undo.canUndo()) {&#xa;                    undo.undo();&#xa;                }&#xa;            } catch (CannotUndoException e) {&#xa;            }&#xa;        }&#xa;   });&#xa;&#xa;// Bind the undo action to ctl-Z&#xa;jTextArea1.getInputMap().put(KeyStroke.getKeyStroke(&apos;Z&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()), &quot;Undo&quot;);&#xa;&#xa;// Create an undo action and add it to the text component&#xa;jTextArea1.getActionMap().put(&quot;Redo&quot;,&#xa;    new AbstractAction(&quot;Redo&quot;) {&#xa;        public void actionPerformed(ActionEvent evt) {&#xa;            try {&#xa;                if (undo.canRedo()) {&#xa;                    undo.redo();&#xa;                }&#xa;            } catch (CannotUndoException e) {&#xa;            }&#xa;        }&#xa;   });&#xa;&#xa;// Bind the undo action to ctl-Z&#xa;jTextArea1.getInputMap().put(KeyStroke.getKeyStroke(&apos;Y&apos;, Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()), &quot;Redo&quot;);"/>
                  </AuxValues>
                </Component>
              </SubComponents>
            </Container>
          </SubComponents>
        </Container>
        <Container class="javax.swing.JScrollPane" name="jScrollPane2">
          <AuxValues>
            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
          </AuxValues>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="right"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
          <SubComponents>
            <Component class="javax.swing.JTextArea" name="jTextArea2">
              <Properties>
                <Property name="columns" type="int" value="20"/>
                <Property name="rows" type="int" value="5"/>
                <Property name="name" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
                  <Connection code="&quot;OutputTextArea&quot;" type="code"/>
                </Property>
              </Properties>
              <AuxValues>
                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="jTextArea2.addMouseListener(new MouseAdapter()&#xa;{&#xa;    public void mouseClicked(MouseEvent me)&#xa;    {&#xa;        String s = &quot;&quot;;&#xa;        String[] splitS = new String[5];&#xa;        if (!jTextArea2.getText().trim().equals(&quot;&quot;)) {&#xa;            int position = jTextArea2.viewToModel(jTextArea2.getMousePosition());&#xa;            String[] text = jTextArea2.getText().split(&quot;\n&quot;);&#xa;            int[] charNum = new int[text.length];&#xa;            for (int i = 0; i &lt; text.length; i++) {&#xa;                charNum[i] = text[i].length() + 1;&#xa;            }&#xa;            int sum = 0;&#xa;            for (int i = 0; i &lt; charNum.length; i++) {&#xa;                sum += charNum[i];&#xa;                if (sum &gt;= position) {&#xa;                    s += text[i] + &quot;\n&quot;;&#xa;                    break;&#xa;                }&#xa;            }&#xa;            //System.out.println(&quot;Clicked on text: &quot; + s);&#xa;            Pattern pattern = Pattern.compile(&quot;line \\d+&quot;);&#xa;            Matcher matcher = pattern.matcher(s);&#xa;            if (matcher.find())&#xa;            {&#xa;                try{&#xa;                    String lineStr = matcher.group(0);&#xa;                    System.out.println(lineStr);&#xa;                    lineStr = lineStr.split(&quot; &quot;)[1];&#xa;                    System.out.println(&quot;Error line number is: &quot; + lineStr);&#xa;                    int pos = Integer.parseInt(lineStr) * jTextArea1.getColumns();&#xa;&#xa;                    //go to error line number in editor&#xa;                    // Get the rectangle of the where the text would be visible...&#xa;                    Rectangle viewRect = jTextArea1.modelToView(pos);&#xa;                    // Scroll to make the rectangle visible&#xa;                    jTextArea1.scrollRectToVisible(viewRect);&#xa;                    // Highlight the text&#xa;                    jTextArea1.setCaretPosition(pos);&#xa;                    jTextArea1.moveCaretPosition(pos);&#xa;                }catch(Exception ne){&#xa;                    System.out.println(&quot;Error: &quot; +  ne.getMessage());&#xa;                }&#xa;            }&#xa;            &#xa;        }&#xa;    }&#xa;});"/>
              </AuxValues>
            </Component>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>
